# File: Makefile.std
# Standard makefile for Angband.
#
# This makefile probably requires GNU make.
#
# This makefile is intended for use with Unix machines running X11, gtk or 
# (n)curses.  You can choose which you want to compile for below.
#
# You can also place your alterations to a file in the src/ directory called 
# "config", in which case that file will override what is specified here.
#

#### Things you should, or could, change ####


# What systems to try.
#
# By default, this tries to compile both the X11 and "curses" terminal mode
# ports in the same executable.  On Linux only, it also builds the lfb 'console' 
# module.


# Recent, known-to-work ports

# Support X11 (main-x11.c)
# You may have to add various X11 include/library directories to the
# "CFLAGS", if your machine places files in a weird location, for example
# " -I/usr/X11R6/include", or "-L/usr/X11R6/lib" to LIBS.
SYS_x11 = -DUSE_X11 -lX11

# Support curses console mode (main-gcu.c)
# If this fails, try the alternate below
SYS_gcu = -DUSE_GCU -DUSE_NCURSES -lncurses
#SYS_gcu = -DUSE_GCU -lcurses -ltermcap

# Support Xaw motif (main-xaw.c)
SYS_xaw = -DUSE_XAW -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11

# Support the GTK2 graphical tookit (main-gtk.c)
SYS_gtk = -DUSE_GTK $(shell pkg-config gtk+-2.0 --libs --cflags)

# Support SDL frontend
SYS_sdl = -DUSE_SDL $(shell sdl-config --cflags) $(shell sdl-config --libs) -lSDL_ttf -lSDL_image




## Support SDL_mixer for sound
#SOUND_sdl = -DSOUND_SDL $(shell sdl-config --cflags) $(shell sdl-config --libs) -lSDL_mixer



# Basic compiler stuff
CC = gcc
CFLAGS = -Wall -O2 -g -Wno-unused-parameter


# Add additional search directives here
# Example: -I/usr/X11R6/include -I/usr/include/ncurses
INCLUDES =
# Example: -L/usr/X11R6/lib 
LIBS =


# Version info
EXE = oangband
VERSION = 1.1.0u



#### Things you probably shouldn't change, unless there is a problem ####

# Import user prefs
# If you don't want to edit this file, put your module redefinitions
# and build flags in "./config"
-include config


# Extract CFLAGS and LIBS from the system definitions
MODULES = $(SYS_x11) $(SYS_gcu) $(SYS_xaw) $(SYS_gtk) $(SYS_sdl) $(SOUND_sdl)
CFLAGS += $(patsubst -l%,,$(MODULES)) $(INCLUDES)
LIBS += $(patsubst -D%,,$(patsubst -I%,, $(MODULES)))


# Extract system we're running on
uname = $(shell uname -s)

# Enable linux-specific modules, if requested.
ifeq ($(uname),Linux)
  CFLAGS += -DHAVE_MKSTEMP
endif


# Object definitions
X11OBJS = maid-x11.o main-x11.o main-xaw.o main-gtk.o
MAINOBJS = main.o main-gcu.o main-sdl.o snd-sdl.o $(X11OBJS)
OBJS = $(BASEOBJS) $(MAINOBJS)




#### Targets and objects #####

# By default, copy the executable to ../ so that you don't find
# yourself debugging a stale copy.
default: install

# Makefile.inc contains an up-to-date set of object files to compile, so
# we include it
OBJEXT=.o
include Makefile.inc


#
# Targets
#

# Build the "Angband" program
$(EXE): $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(EXE) $(OBJS) $(LIBS)

# Install the game.
install: ../$(EXE)


../$(EXE): $(EXE)
	cp $(EXE) ..

# Clean up old junk
clean:
	-rm -f *.o $(EXE)

# make a distribution
DIRS = lib/apex lib/bone lib/data lib/edit lib/file lib/help lib/info \
       lib/pref lib/save lib/user lib/xtra/sound lib/xtra/graf lib/xtra/font

TMPDIR = ./$(EXE)-$(VERSION)
dist:
	@-rm -rf $(TMPDIR)
	@echo making directories...
	@for i in $(DIRS) ; do mkdir -p $(TMPDIR)/$$i ; done
	@echo copying files...
	@cp ../lib/edit/*.txt $(TMPDIR)/lib/edit
	@cp ../lib/file/*.txt $(TMPDIR)/lib/file
	@cp ../lib/help/*.txt ../lib/help/*.hlp $(TMPDIR)/lib/help
	@cp ../lib/pref/*.prf $(TMPDIR)/lib/pref
	@cp ../lib/xtra/font/*.txt $(TMPDIR)/lib/xtra/font
	@echo attempting to install sound and graphics
	@-cp ../lib/xtra/sound/*.wav $(TMPDIR)/lib/xtra/sound
	@-cp ../lib/xtra/graf/*.bmp $(TMPDIR)/lib/xtra/graf
	@cp ../changes.txt ../readme.txt $(TMPDIR)
	@cp $(EXE) $(TMPDIR)
	tar czf ../$(EXE)-$(VERSION).tar.gz $(TMPDIR)
	rm -rf $(TMPDIR)


#  Verify module arguments
args:
	@echo CFLAGS = $(CFLAGS)
	@echo LIBS = $(LIBS)


# Generate dependencies automatically
depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


# Some file dependencies
%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

# X11 dependencies
$(X11OBJS) : $(INCS) maid-x11.h

# Basic dependencies for main-xxx.c, main.c
$(MAINOBJS) : $(INCS)


