#------------------------------------------------------------------------------
.SUFFIXES:
#------------------------------------------------------------------------------
ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
endif

include $(DEVKITARM)/ds_rules

#------------------------------------------------------------------------------
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# INCLUDES is a list of directories containing extra header files
# DATA is a list of directories containing binary files
# all directories are relative to this makefile
#	IN THIS MODIFIED VERSION, YOU MAY ONLY HAVE ONE SOURCE DIRECTORY!!
#	OTHERSRC is sources that must be linked against but not compiled here
#------------------------------------------------------------------------------
TARGET		:=	oangband
BUILD		:=	$(CURDIR)
SOURCES		:=	$(CURDIR)
#NRM OTHERSRC	:=	$(CURDIR)
#NRM INCLUDES	:=	sys/nds/arm9/include include
DATA		:=

#------------------------------------------------------------------------------
# any extra libraries we wish to link with the project
#------------------------------------------------------------------------------
LIBS	:= -lfat -lnds9
 
#------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level 
# containing include and lib
#------------------------------------------------------------------------------
LIBDIRS	:=	$(LIBNDS) $(DEVKITPRO)/libfat-nds
 
#------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add 
# additional rules for different file extensions
#------------------------------------------------------------------------------
 
export ARM9BIN	:=	$(BUILD)/$(TARGET).arm9
export ARM9ELF	:=	$(BUILD)/$(TARGET).arm9.elf
#NRM export DEPSDIR := $(BUILD)
export DEPSDIR := 

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
					$(foreach dir,$(DATA),$(CURDIR)/$(dir))
 
#NRM CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
#NRM CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
#NRM SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
#NRM BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#NRM OTHERC		:=	$(foreach dir,$(OTHERSRC),$(notdir $(wildcard $(dir)/*.c)))
 
#------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#------------------------------------------------------------------------------
	export LD	:=	$(CC)
#------------------------------------------------------------------------------
else
#------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#------------------------------------------------------------------------------
endif
#------------------------------------------------------------------------------
HDRS = h-basic.h h-define.h h-type.h h-system.h h-config.h

INCS = angband.h config.h defines.h externs.h types.h \
       z-term.h z-rand.h z-type.h z-util.h z-virt.h z-form.h z-file.h

HEADERS = $(HDRS) $(INCS)

ZFILES = z-form.o z-rand.o z-term.o z-type.o z-util.o z-virt.o z-file.o

ANGFILES = \
	attack.o \
	birth.o \
	cave.o \
	cmd0.o \
	cmd1.o \
	cmd2.o \
	cmd3.o \
	cmd4.o \
	cmd5.o \
	cmd6.o \
	dungeon.o \
	files.o \
	generate.o \
	init1.o \
	init2.o \
	load.o \
	monmove.o \
	monattk.o \
	monster1.o \
	monster2.o \
	info.o \
	object1.o \
	object2.o \
	randart.o \
	randname.o \
	save.o \
	spells1.o \
	spells2.o \
	squelch.o \
	store.o \
	tables.o \
	ui.o \
	util.o \
	variable.o \
	wizard1.o \
	wizard2.o \
	xtra1.o \
	xtra2.o \
	main-nds.o \

BASEOBJS := $(ANGFILES)
ZOBJS := $(ZFILES)


# Note dependencies
$(BASEOBJS): $(HEADERS)
$(ZOBJS): $(HDRS)
BASEOBJS += $(ZOBJS)

z-form.o: z-form.h z-util.h z-virt.h
z-rand.o: z-rand.h
z-term.o: z-term.h z-virt.h
z-util.o: z-util.h
z-virt.o: z-virt.h z-util.h
z-file.o: z-file.h

OFILES	:= $(BASEOBJS)
 
export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)
 
export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)
 
#------------------------------------------------------------------------------
# options for code generation
#------------------------------------------------------------------------------
ARCH	:=	-mthumb -mthumb-interwork

# note: arm9tdmi isn't the correct CPU arch, but anything newer and LD
# *insists* it has a FPU or VFP, and it won't take no for an answer!
CFLAGS	:=	-g -Wall -O2\
 			-mcpu=arm9tdmi -mtune=arm9tdmi -fomit-frame-pointer\
			-ffast-math \
			$(ARCH)

CFLAGS	+=	$(INCLUDE) -DARM9 -DNDS
#NRM CXXFLAGS	:=	$(CFLAGS) -fno-rtti -fno-exceptions

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=ds_arm9.specs -g $(ARCH) -mno-fpu -Wl,-Map,$(BUILD)/$(TARGET).arm9.map

.PHONY: all clean
  
#------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD)/$(TARGET).arm9 $(BUILD)/$(TARGET).arm9.elf
 
 
#------------------------------------------------------------------------------
 
DEPENDS	:=	$(OFILES:.o=.d)
 
#------------------------------------------------------------------------------
# main targets
#------------------------------------------------------------------------------
all	:	$(ARM9BIN)

$(ARM9BIN)	:	$(ARM9ELF)
#NRM 	@$(OBJCOPY) -O binary $< $@
	@echo built ... $(notdir $@)

 $(ARM9ELF)	:	$(foreach ofile,$(OFILES),$(BUILD)/$(ofile)) $(foreach ofile,$(OTHEROBJ),$(BUILD)/$(ofile))
	@echo linking $(notdir $@)
	@$(LD)  $(LDFLAGS) $(foreach ofile,$(OFILES),$(BUILD)/$(ofile)) \
 		$(foreach ofile,$(OTHEROBJ),$(BUILD)/$(ofile)) \
 			$(LIBPATHS) $(LIBS) -o $@
	
$(BUILD)/%.o	:	$(SOURCES)/%.c
	@echo hello
	@echo $(notdir $<)
	@$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d $(CFLAGS) -c $< -o $@
	
#NRM $(BUILD)/%.o	:	$(SOURCES)/%.s
#NRM 	@echo $(notdir $<)
#NRM 	@$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d -x assembler-with-cpp \ 
#NRM 		$(ASFLAGS) -c $< -o $@


#------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data 
#------------------------------------------------------------------------------
%.bin.o	:	%.bin
#------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)


-include $(DEPENDS)

#------------------------------------------------------------------------------